/*
========================================================================================
    Base Configuration for SSUextract Pipeline
========================================================================================
    Default configuration for all processes
----------------------------------------------------------------------------------------
*/

process {
    // Global process configuration
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements and error handling
    withName:CHECK_FNA_HEADERS {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 2.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 30.m  * task.attempt, 'time'    ) }
    }
    
    withName:CMSEARCH {
        cpus   = { check_max( params.threads_per_job * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    
    withName:GET_CMSTATS {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    
    withName:EXTRACT_SEQUENCES {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    
    withName:BLAST_ANNOTATE {
        cpus   = { check_max( params.threads_per_job * task.attempt, 'cpus'    ) }
        memory = { check_max( 8.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    
    withName:MERGE_BLAST_RESULTS {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 2.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 30.m  * task.attempt, 'time'    ) }
    }
    
    withName:PROCESS_RESULTS {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    
    withName:BUILD_SUMMARY {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
}