/*
========================================================================================
    SSUextract Nextflow Configuration
========================================================================================
    Default configuration for SSUextract pipeline
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Input/output options
    querydir                   = 'data/example'
    modeldir                   = 'resources/models'
    outdir                     = null // Will be set dynamically
    database_path              = 'resources/database'
    
    // Pipeline parameters
    min_extract_length         = 30
    threads_per_job            = 2
    
    // Boilerplate options
    help                       = false
    version                    = false
    
    // Max resource options
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Set output directory based on query directory if not specified
if (!params.outdir) {
    def querydir_name = new File(params.querydir).getName()
    params.outdir = "results/${querydir_name}"
    params.querydir_name = querydir_name
} else {
    def querydir_name = new File(params.querydir).getName()
    params.querydir_name = querydir_name
}

// Load base configuration
includeConfig 'config/base.config'

// Profiles for different execution environments
profiles {
    debug {
        dumpHashes = true
        process.beforeScript = 'echo $HOSTNAME'
        cleanup = false
    }
    
    conda {
        conda.enabled = true
        conda.cacheDir = '$HOME/.conda/cache'
        process.conda = "${projectDir}/config/environment.yml"
    }
    
    local {
        process {
            executor = 'local'
            cpus = { check_max( 4 * task.attempt, 'cpus' ) }
            memory = { check_max( 8.GB * task.attempt, 'memory' ) }
            time = { check_max( 2.h * task.attempt, 'time' ) }
        }
    }
    
    slurm {
        process {
            executor = 'slurm'
            queue = 'normal'
            clusterOptions = '--account=your_account'
        }
    }
    
    test {
        params {
            querydir = 'data/example'
            modeldir = 'resources/models'
            max_cpus = 2
            max_memory = '4.GB'
            max_time = '1.h'
        }
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'NeLLi-team/ssuextract'
    author          = 'Frederik Schulz'
    homePage        = 'https://github.com/NeLLi-team/ssuextract'
    description     = 'SSU rRNA extraction pipeline using covariance models'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '0.9.0'
    doi             = ''
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}